# File: .github/workflows/deploy-prod.yml
name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Tag version for production"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Install Node.js (version based on your project needs)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # or whatever version you need
      # Install dependencies and build the React app
      - name: Install dependencies and build
        run: |
          npm install
          npm run build

      - name: List contents after build
        run: ls -la

        # Archive the build folder (React's build output)
      - name: Archive production artifacts
        run: tar -zcvf build.tar.gz dist
        # If you're using Vite, change ./build to ./dist

      - name: List contents after archiving
        run: ls -la

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: build.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install sshpass to use password-based SSH authentication
      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Print current directory
        run: pwd

      - name: List contents before copying
        run: |
          echo "Listing current directory:"
          ls -la

      - name: Copy build.tar.gz to VPS
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no ./build.tar.gz root@${{ secrets.DEV_HOST }}:/var/www/vendor-production/

      # Use sshpass to SSH into the VPS using password authentication
      - name: SSH to VPS and Deploy using password
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_USER }}@${{ secrets.DEV_HOST }} << 'EOF'
            cd /var/www/vendor-production
            rm -rf dist
            tar -zxvf build.tar.gz
            rm build.tar.gz
            sudo chown -R www-data:www-data /var/www/vendor-production
            sudo systemctl reload nginx
          EOF
